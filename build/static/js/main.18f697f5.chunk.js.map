{"version":3,"sources":["Components/contactForm/ContactForm.module.css","Components/contactList/ContactList.module.css","Components/filter/Filter.module.css","redux/contacts/actions.js","Components/contactForm/ContactForm.js","Components/contactList/ContactList.js","Components/filter/Filter.js","Components/App.js","redux/contacts/redusers.js","redux/store.js","index.js"],"names":["module","exports","addNewContact","createAction","contact","payload","id","nanoid","getAllContacts","removeContact","setFilter","initialState","name","number","ContactForm","useState","form","setForm","dispatch","useDispatch","contacts","useSelector","state","items","onHandleChenge","e","target","value","prev","isContactExist","some","toLowerCase","reset","onSubmit","preventDefault","className","s","nameinput","type","pattern","title","required","onChange","btncon","disabled","ContactList","contactsList","filter","includes","menu","map","btn","onClick","Filter","filterinput","App","itemsRedusers","createReducer","action","_","filterReduser","contactsReduser","combineReducers","contactsPersistConfig","key","storage","whitelist","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","store","configureStore","reducer","persistReducer","persistor","persistStore","ReactDom","render","loading","document","getElementById"],"mappings":"kIACAA,EAAOC,QAAU,CAAC,SAAW,8BAA8B,UAAY,+BAA+B,OAAS,8B,mBCA/GD,EAAOC,QAAU,CAAC,IAAM,yBAAyB,KAAO,0BAA0B,KAAO,4B,mBCAzFD,EAAOC,QAAU,CAAC,YAAc,8B,+HCAnBC,EAAgBC,YAC3B,0BACA,SAACC,GACC,MAAO,CAAEC,QAAQ,2BAAMD,GAAP,IAAgBE,GAAIC,oBAG3BC,EAAiBL,YAAa,wBAC9BM,EAAgBN,YAAa,0BAC7BO,EAAYP,YAAa,sB,OCHhCQ,EAAe,CAAEC,KAAM,GAAIC,OAAQ,IAE1B,SAASC,IACtB,MAAwBC,mBAASJ,GAAjC,mBAAOK,EAAP,KAAaC,EAAb,KACMC,EAAWC,cACXC,EAAWC,aAAY,SAACC,GAAD,OAAWA,EAAMF,SAASG,SACjDC,EAAiB,SAACC,GACtB,MAAwBA,EAAEC,OAAlBd,EAAR,EAAQA,KAAMe,EAAd,EAAcA,MACdV,GAAQ,SAACW,GAAD,mBAAC,eAAeA,GAAhB,kBAAuBhB,EAAOe,QAGlCE,EAAiB,kBACrBT,EAASU,MACP,SAAC1B,GAAD,OAAaA,EAAQQ,KAAKmB,gBAAkBf,EAAKJ,KAAKmB,kBAYpDC,EAAQ,WACZf,GAAQ,SAACW,GAAD,mBAAC,eAAeA,GAAhB,IAAsBhB,KAAM,GAAIC,OAAQ,SAGlD,OACE,qCACE,uBAAMoB,SAfa,SAACR,GACtBA,EAAES,kBACDL,KAAoBX,EAAShB,EAAc,eAAKc,KAIjDgB,KASE,UACE,0CAEE,uBACEG,UAAWC,IAAEC,UACbV,MAAOX,EAAKJ,KACZ0B,KAAK,OACL1B,KAAK,OACL2B,QAAQ,yHACRC,MAAM,kcACNC,UAAQ,EACRC,SAAUlB,OAId,4CAEE,uBACEW,UAAWC,IAAEC,UACbV,MAAOX,EAAKH,OACZyB,KAAK,MACL1B,KAAK,SACL2B,QAAQ,yFACRC,MAAM,giBACNC,UAAQ,EACRC,SAAUlB,OAGd,wBAAQW,UAAWC,IAAEO,OAAQL,KAAK,SAASM,SAAUf,IAArD,4BAIDA,KAAoB,kE,uBCjCZgB,EA9BK,WAClB,IAAMC,EAAezB,aAAY,YAAsC,IAAD,IAAlCD,SAAYG,EAAsB,EAAtBA,MAAOwB,EAAe,EAAfA,OACrD,OAAIA,EACKxB,EAAMwB,QAAO,SAAC3C,GAAD,OAClBA,EAAQQ,KAAKmB,cAAciB,SAASD,EAAOhB,kBAEjCR,KAEVL,EAAWC,cACjB,OACE,oBAAIgB,UAAWC,IAAEa,KAAjB,SACGH,GACCA,EAAaI,KAAI,SAAC9C,GAAD,OACf,+BACE,iCAAOA,EAAQQ,KAAf,QACA,+BAAOR,EAAQS,SACf,wBACEsB,UAAWC,IAAEe,IACbb,KAAK,SACLhC,GAAIF,EAAQE,GACZ8C,QAAS,kBAAMlC,EAAST,EAAcL,EAAQE,MAJhD,sBAHOF,EAAQE,U,iBCEZ+C,EAhBA,WACb,IAAMnC,EAAWC,cACX4B,EAAS1B,aAAY,SAACC,GAAD,OAAWA,EAAMyB,UAC5C,OACE,wBAAOZ,UAAWC,IAAEkB,YAApB,kCAEE,uBACEhB,KAAK,OACL1B,KAAK,SACLe,MAAOoB,EACPL,SAAU,SAACjB,GAAD,OAAOP,EAASR,EAAUe,EAAEC,OAAOC,eCGtC4B,EAXH,WACV,OACE,qCACE,2CACA,cAACzC,EAAD,IACA,0CACA,cAAC,EAAD,IACA,cAAC,EAAD,Q,gCCJA0C,EAAgBC,YAAc,IAAD,mBAChCvD,GAAgB,SAACoB,EAAOoC,GAAR,4BAAuBpC,GAAvB,CAA8BoC,EAAOrD,aADrB,cAEhCG,GAAiB,SAACmD,EAAGD,GAAJ,OAAeA,EAAOrD,WAFP,cAGhCI,GAAgB,SAACa,EAAOoC,GAAR,OACfpC,EAAMyB,QAAO,SAAC3C,GAAD,OAAaA,EAAQE,KAAOoD,EAAOrD,cAJjB,IAO7BuD,EAAgBH,YAAc,GAAD,eAChC/C,GAAY,SAACiD,EAAGD,GAAJ,OAAeA,EAAOrD,YAExBwD,EAAkBC,YAAgB,CAC7CvC,MAAOiC,EACPT,OAAQa,I,OCNJG,EAAwB,CAC5BC,IAAK,WACLC,YACAC,UAAW,CAAC,UAERC,EAAU,YACXC,YAAqB,CACtBC,kBAAmB,CACjBC,eAAgB,CAACC,IAAOC,IAAWC,IAAOC,IAASC,IAAOC,SAKnDC,EAAQC,YAAe,CAClCC,QAAS,CACP3D,SAAU4D,YAAejB,EAAuBF,IAElDM,eAGWc,EAAYC,YAAaL,GC7BtCM,IAASC,OACP,cAAC,IAAD,CAAUP,MAAOA,EAAjB,SACE,cAAC,IAAD,CAAaQ,QAAS,KAAMJ,UAAWA,EAAvC,SACE,cAAC,EAAD,QAGJK,SAASC,eAAe,W","file":"static/js/main.18f697f5.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"namelist\":\"ContactForm_namelist__1uOA0\",\"nameinput\":\"ContactForm_nameinput__3FGo9\",\"btncon\":\"ContactForm_btncon__1_np9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"btn\":\"ContactList_btn__227vT\",\"menu\":\"ContactList_menu__2xxmr\",\"list\":\"ContactList_list__TRQ1j\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"filterinput\":\"Filter_filterinput__2HDlw\"};","import { createAction, nanoid } from \"@reduxjs/toolkit\";\r\nexport const addNewContact = createAction(\r\n  \"contacts/addNewContact\",\r\n  (contact) => {\r\n    return { payload: { ...contact, id: nanoid() } };\r\n  }\r\n);\r\nexport const getAllContacts = createAction(\"contacts/getContacts\");\r\nexport const removeContact = createAction(\"contacts/removeContact\");\r\nexport const setFilter = createAction(\"contacts/setFilter\");\r\n","import { useState } from \"react\";\r\nimport s from \"./ContactForm.module.css\";\r\n// import PropTypes from \"prop-types\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { addNewContact } from \"../../redux/contacts/actions\";\r\nimport { useSelector } from \"react-redux\";\r\nconst initialState = { name: \"\", number: \"\" };\r\n\r\nexport default function ContactForm() {\r\n  const [form, setForm] = useState(initialState);\r\n  const dispatch = useDispatch();\r\n  const contacts = useSelector((state) => state.contacts.items);\r\n  const onHandleChenge = (e) => {\r\n    const { name, value } = e.target;\r\n    setForm((prev) => ({ ...prev, [name]: value }));\r\n  };\r\n\r\n  const isContactExist = () =>\r\n    contacts.some(\r\n      (contact) => contact.name.toLowerCase() === form.name.toLowerCase()\r\n    );\r\n\r\n  const onHandleSubmit = (e) => {\r\n    e.preventDefault();\r\n    !isContactExist() && dispatch(addNewContact({ ...form }));\r\n    // !isContactExist()\r\n    //   ? dispatch(addNewContact({ ...form }))\r\n    //   : alert(`Сontact ${form.name.toUpperCase()} already exists`);\r\n    reset();\r\n  };\r\n\r\n  const reset = () => {\r\n    setForm((prev) => ({ ...prev, name: \"\", number: \"\" }));\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <form onSubmit={onHandleSubmit}>\r\n        <label>\r\n          Name:\r\n          <input\r\n            className={s.nameinput}\r\n            value={form.name}\r\n            type=\"text\"\r\n            name=\"name\"\r\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n            required\r\n            onChange={onHandleChenge}\r\n          />\r\n        </label>\r\n\r\n        <label>\r\n          Number:\r\n          <input\r\n            className={s.nameinput}\r\n            value={form.number}\r\n            type=\"tel\"\r\n            name=\"number\"\r\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n            title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n            required\r\n            onChange={onHandleChenge}\r\n          />\r\n        </label>\r\n        <button className={s.btncon} type=\"submit\" disabled={isContactExist()}>\r\n          Add contact\r\n        </button>\r\n      </form>\r\n      {isContactExist() && <span>Сontact already exists</span>}\r\n    </>\r\n  );\r\n}\r\n\r\n// ContactForm.propTypes = {\r\n//   name: PropTypes.string,\r\n//   number: PropTypes.number,\r\n// };\r\n","import React from \"react\";\r\nimport s from \"./ContactList.module.css\";\r\n// import PropTypes from \"prop-types\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { removeContact } from \"../../redux/contacts/actions\";\r\n\r\nconst ContactList = () => {\r\n  const contactsList = useSelector(({ contacts: { items, filter } }) => {\r\n    if (filter) {\r\n      return items.filter((contact) =>\r\n        contact.name.toLowerCase().includes(filter.toLowerCase())\r\n      );\r\n    } else return items;\r\n  });\r\n  const dispatch = useDispatch();\r\n  return (\r\n    <ul className={s.menu}>\r\n      {contactsList &&\r\n        contactsList.map((contact) => (\r\n          <li key={contact.id}>\r\n            <span>{contact.name}: </span>\r\n            <span>{contact.number}</span>\r\n            <button\r\n              className={s.btn}\r\n              type=\"button\"\r\n              id={contact.id}\r\n              onClick={() => dispatch(removeContact(contact.id))}\r\n            >\r\n              Delete\r\n            </button>\r\n          </li>\r\n        ))}\r\n    </ul>\r\n  );\r\n};\r\n\r\nexport default ContactList;\r\n","import React from \"react\";\r\nimport s from \"./Filter.module.css\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { setFilter } from \"../../redux/contacts/actions\";\r\nconst Filter = () => {\r\n  const dispatch = useDispatch();\r\n  const filter = useSelector((state) => state.filter);\r\n  return (\r\n    <label className={s.filterinput}>\r\n      Find contacs by name:\r\n      <input\r\n        type=\"text\"\r\n        name=\"filter\"\r\n        value={filter}\r\n        onChange={(e) => dispatch(setFilter(e.target.value))}\r\n      />\r\n    </label>\r\n  );\r\n};\r\n\r\nexport default Filter;\r\n","// import axios from \"axios\";\r\nimport React from \"react\";\r\n\r\nimport ContactForm from \"./contactForm/ContactForm\";\r\nimport ContactList from \"./contactList/ContactList\";\r\nimport Filter from \"./filter/Filter\";\r\n\r\nconst App = () => {\r\n  return (\r\n    <>\r\n      <h1>Phonebook</h1>\r\n      <ContactForm />\r\n      <h2>Contacts</h2>\r\n      <Filter />\r\n      <ContactList />\r\n    </>\r\n  );\r\n};\r\nexport default App;\r\n","import { combineReducers } from \"redux\";\r\nimport { createReducer } from \"@reduxjs/toolkit\";\r\n\r\nimport {\r\n  getAllContacts,\r\n  addNewContact,\r\n  removeContact,\r\n  setFilter,\r\n} from \"./actions\";\r\n\r\nconst itemsRedusers = createReducer([], {\r\n  [addNewContact]: (state, action) => [...state, action.payload],\r\n  [getAllContacts]: (_, action) => action.payload,\r\n  [removeContact]: (state, action) =>\r\n    state.filter((contact) => contact.id !== action.payload),\r\n});\r\n\r\nconst filterReduser = createReducer(\"\", {\r\n  [setFilter]: (_, action) => action.payload,\r\n});\r\nexport const contactsReduser = combineReducers({\r\n  items: itemsRedusers,\r\n  filter: filterReduser,\r\n});\r\n","// import { combineReducers } from \"redux\";\r\n\r\nimport { configureStore, getDefaultMiddleware } from \"@reduxjs/toolkit\";\r\nimport storage from \"redux-persist/lib/storage\";\r\nimport { contactsReduser } from \"./contacts/redusers\";\r\nimport {\r\n  persistStore,\r\n  persistReducer,\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from \"redux-persist\";\r\n\r\nconst contactsPersistConfig = {\r\n  key: \"contacts\",\r\n  storage,\r\n  whitelist: [\"items\"],\r\n};\r\nconst middleware = [\r\n  ...getDefaultMiddleware({\r\n    serializableCheck: {\r\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n    },\r\n  }),\r\n];\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    contacts: persistReducer(contactsPersistConfig, contactsReduser),\r\n  },\r\n  middleware,\r\n});\r\n\r\nexport const persistor = persistStore(store);\r\n","import React from \"react\";\r\nimport ReactDom from \"react-dom\";\r\nimport { Provider } from \"react-redux\";\r\nimport { PersistGate } from \"redux-persist/integration/react\";\r\nimport App from \"./Components/App\";\r\nimport { store, persistor } from \"./redux/store\";\r\n\r\nReactDom.render(\r\n  <Provider store={store}>\r\n    <PersistGate loading={null} persistor={persistor}>\r\n      <App />\r\n    </PersistGate>\r\n  </Provider>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}