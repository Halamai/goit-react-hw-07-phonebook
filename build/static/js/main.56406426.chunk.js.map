{"version":3,"sources":["Components/contactForm/ContactForm.module.css","Components/contactList/ContactList.module.css","Components/filter/Filter.module.css","redux/contacts/actions.js","redux/contacts/contacts-selectors.js","Components/contactForm/ContactForm.js","redux/contacts/contactsOperations.js","Components/contactList/ContactList.js","Components/filter/Filter.js","Components/App.js","redux/contacts/redusers.js","redux/store.js","index.js"],"names":["module","exports","addNewContact","createAction","contact","payload","getAllContacts","removeContact","setFilter","setLoader","setError","createReducer","contactsErrorSelector","state","contacts","error","contactsIsLoadingSelector","isLoading","contactsContactsgSelector","items","contactsFilterSelector","filter","initialState","name","number","ContactForm","useSelector","useState","form","setForm","dispatch","useDispatch","onHandleChenge","e","target","value","prev","isContactExist","some","toLowerCase","reset","onSubmit","preventDefault","a","axios","post","response","id","data","message","addContactsOperation","className","s","nameinput","type","pattern","title","required","onChange","btncon","disabled","getWisibileContacts","includes","ContactList","contactsList","menu","map","btn","onClick","delete","Filter","filterinput","App","useEffect","get","Object","keys","key","itemsRedusers","action","_","contactLoaderReducer","filterReduser","errorReducer","contactsReduser","combineReducers","rootReducer","store","configureStore","reducer","ReactDom","render","document","getElementById"],"mappings":"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","file":"static/js/main.56406426.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"namelist\":\"ContactForm_namelist__2vc7E\",\"nameinput\":\"ContactForm_nameinput__2uDE6\",\"btncon\":\"ContactForm_btncon__ZaQkl\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"btn\":\"ContactList_btn__vvZMa\",\"menu\":\"ContactList_menu__16iHy\",\"list\":\"ContactList_list__P3emf\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"filterinput\":\"Filter_filterinput__1fF8d\"};","import { createAction, createReducer, nanoid } from \"@reduxjs/toolkit\";\r\nexport const addNewContact = createAction(\r\n  \"contacts/addNewContact\",\r\n  (contact) => {\r\n    return { payload: contact };\r\n  }\r\n);\r\nexport const getAllContacts = createAction(\"contacts/getContacts\");\r\nexport const removeContact = createAction(\"contacts/removeContact\");\r\nexport const setFilter = createAction(\"contacts/setFilter\");\r\nexport const setLoader = createAction(\"contacts/setLoader\");\r\nexport const setError = createReducer(\"contacts/setError\");\r\n","// import { createSelector } from \"reselect\";\r\n\r\nconst contactsErrorSelector = (state) => state.contacts.error;\r\nconst contactsIsLoadingSelector = (state) => state.contacts.isLoading;\r\nconst contactsContactsgSelector = (state) => state.contacts.items;\r\nconst contactsFilterSelector = (state) => state.filter;\r\n\r\n// export const getPostsWithTags = createSelector(\r\n//   [getAllPosts, getSelectedTags],\r\n//   (posts, tags) =>\r\n//     posts.filter((post) => tags.some((tag) => post.tags.includes(tag)))\r\n// );\r\n\r\nexport {\r\n  contactsErrorSelector,\r\n  contactsIsLoadingSelector,\r\n  contactsContactsgSelector,\r\n  contactsFilterSelector,\r\n};\r\n","import { useState } from \"react\";\r\nimport s from \"./ContactForm.module.css\";\r\n// import PropTypes from \"prop-types\";\r\n// import axios from \"axios\";\r\nimport { useDispatch } from \"react-redux\";\r\n// import { addNewContact } from \"../../redux/contacts/actions\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { addContactsOperation } from \"../../redux/contacts/contactsOperations\";\r\nimport { setError } from \"../../redux/contacts/actions\";\r\nimport {\r\n  contactsContactsgSelector,\r\n  contactsErrorSelector,\r\n} from \"../../redux/contacts/contacts-selectors\";\r\nconst initialState = { name: \"\", number: \"\" };\r\n\r\nexport default function ContactForm() {\r\n  const error = useSelector(contactsErrorSelector);\r\n  const contacts = useSelector(contactsContactsgSelector);\r\n  const [form, setForm] = useState(initialState);\r\n  const dispatch = useDispatch();\r\n  const onHandleChenge = (e) => {\r\n    if (error) dispatch(setError(\"\"));\r\n    const { name, value } = e.target;\r\n    setForm((prev) => ({ ...prev, [name]: value }));\r\n  };\r\n\r\n  const isContactExist = () =>\r\n    contacts.some(\r\n      (contact) => contact.name.toLowerCase() === form.name.toLowerCase()\r\n    );\r\n\r\n  const onHandleSubmit = (e) => {\r\n    e.preventDefault();\r\n    !isContactExist() && dispatch(addContactsOperation({ ...form }));\r\n    // !isContactExist()\r\n    //   ? dispatch(addNewContact({ ...form }))\r\n    //   : alert(`Сontact ${form.name.toUpperCase()} already exists`);\r\n    reset();\r\n  };\r\n\r\n  const reset = () => {\r\n    setForm((prev) => ({ ...prev, name: \"\", number: \"\" }));\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <form onSubmit={onHandleSubmit}>\r\n        <label>\r\n          Name:\r\n          <input\r\n            className={s.nameinput}\r\n            value={form.name}\r\n            type=\"text\"\r\n            name=\"name\"\r\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n            required\r\n            onChange={onHandleChenge}\r\n          />\r\n        </label>\r\n\r\n        <label>\r\n          Number:\r\n          <input\r\n            className={s.nameinput}\r\n            value={form.number}\r\n            type=\"tel\"\r\n            name=\"number\"\r\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n            title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n            required\r\n            onChange={onHandleChenge}\r\n          />\r\n        </label>\r\n        <button className={s.btncon} type=\"submit\" disabled={isContactExist()}>\r\n          Add contact\r\n        </button>\r\n      </form>\r\n      {isContactExist() && <span>Сontact already exists</span>}\r\n    </>\r\n  );\r\n}\r\n\r\n// ContactForm.propTypes = {\r\n//   name: PropTypes.string,\r\n//   number: PropTypes.number,\r\n// };\r\n","import axios from \"axios\";\r\nimport {\r\n  addNewContact,\r\n  getAllContacts,\r\n  removeContact,\r\n  setError,\r\n  setLoader,\r\n} from \"./actions\";\r\n\r\nconst addContactsOperation = (form) => async (dispatch) => {\r\n  dispatch(setLoader());\r\n  try {\r\n    const response = await axios.post(\r\n      `https://homework07-e8e46-default-rtdb.firebaseio.com/contacts.json`,\r\n      form\r\n    );\r\n\r\n    dispatch(addNewContact({ ...form, id: response.data.name }));\r\n  } catch (error) {\r\n    dispatch(setError(error.message));\r\n  } finally {\r\n    dispatch(setLoader());\r\n  }\r\n};\r\n\r\nconst getAllContactsOperation = () => async (dispatch) => {\r\n  dispatch(setLoader());\r\n  try {\r\n    const response = await axios.get(\r\n      `https://homework07-e8e46-default-rtdb.firebaseio.com/contacts.json`\r\n    );\r\n    if (response.data) {\r\n      const contacts = Object.keys(response.data).map((key) => ({\r\n        id: key,\r\n        ...response.data[key],\r\n      }));\r\n      dispatch(getAllContacts(contacts));\r\n    }\r\n  } catch (error) {\r\n    dispatch(setError(error.message));\r\n  } finally {\r\n    dispatch(setLoader());\r\n  }\r\n};\r\nconst removeContactOperation = (id) => async (dispatch) => {\r\n  dispatch(setLoader());\r\n  try {\r\n    await axios.delete(\r\n      `https://homework07-e8e46-default-rtdb.firebaseio.com/contacts/${id}.json`\r\n    );\r\n\r\n    dispatch(removeContact(id));\r\n  } catch (error) {\r\n    dispatch(setError(error.message));\r\n  } finally {\r\n    dispatch(setLoader());\r\n  }\r\n};\r\n\r\nexport {\r\n  addContactsOperation,\r\n  getAllContactsOperation,\r\n  removeContactOperation,\r\n};\r\n","import React from \"react\";\r\nimport s from \"./ContactList.module.css\";\r\n// import PropTypes from \"prop-types\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\n// import { removeContact } from \"../../redux/contacts/actions\";\r\nimport { removeContactOperation } from \"../../redux/contacts/contactsOperations\";\r\nimport {\r\n  contactsErrorSelector,\r\n  contactsIsLoadingSelector,\r\n} from \"../../redux/contacts/contacts-selectors\";\r\n\r\nconst getWisibileContacts = ({ contacts: { items, filter } }) => {\r\n  if (filter) {\r\n    return items.filter((contact) =>\r\n      contact.name.toLowerCase().includes(filter.toLowerCase())\r\n    );\r\n  } else return items;\r\n};\r\n\r\nconst ContactList = () => {\r\n  const error = useSelector(contactsErrorSelector);\r\n  const isLoading = useSelector(contactsIsLoadingSelector);\r\n  const contactsList = useSelector(getWisibileContacts);\r\n  const dispatch = useDispatch();\r\n\r\n  return (\r\n    <ul className={s.menu}>\r\n      {isLoading && <h2>...loading</h2>}\r\n      {error && <h2>{error}</h2>}\r\n\r\n      {contactsList &&\r\n        contactsList.map((contact) => (\r\n          <li key={contact.id}>\r\n            <span>{contact.name}: </span>\r\n            <span>{contact.number}</span>\r\n            <button\r\n              className={s.btn}\r\n              type=\"button\"\r\n              id={contact.id}\r\n              onClick={() => dispatch(removeContactOperation(contact.id))}\r\n            >\r\n              Delete\r\n            </button>\r\n          </li>\r\n        ))}\r\n    </ul>\r\n  );\r\n};\r\n\r\nexport default ContactList;\r\n","import React from \"react\";\r\nimport s from \"./Filter.module.css\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { setFilter } from \"../../redux/contacts/actions\";\r\nimport { contactsFilterSelector } from \"../../redux/contacts/contacts-selectors\";\r\n\r\nconst Filter = () => {\r\n  const dispatch = useDispatch();\r\n  const filter = useSelector(contactsFilterSelector);\r\n  return (\r\n    <label className={s.filterinput}>\r\n      Find contacs by name:\r\n      <input\r\n        type=\"text\"\r\n        name=\"filter\"\r\n        value={filter}\r\n        onChange={(e) => dispatch(setFilter(e.target.value))}\r\n      />\r\n    </label>\r\n  );\r\n};\r\n\r\nexport default Filter;\r\n","import React, { useEffect } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { getAllContactsOperation } from \"../redux/contacts/contactsOperations\";\r\n\r\nimport ContactForm from \"./contactForm/ContactForm\";\r\nimport ContactList from \"./contactList/ContactList\";\r\nimport Filter from \"./filter/Filter\";\r\n\r\nconst App = () => {\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    dispatch(getAllContactsOperation());\r\n  }, [dispatch]);\r\n  return (\r\n    <>\r\n      <h1>Phonebook</h1>\r\n      <ContactForm />\r\n      <h2>Contacts</h2>\r\n      <Filter />\r\n      <ContactList />\r\n    </>\r\n  );\r\n};\r\nexport default App;\r\n","import { combineReducers } from \"redux\";\r\nimport { createReducer } from \"@reduxjs/toolkit\";\r\n\r\nimport {\r\n  getAllContacts,\r\n  addNewContact,\r\n  removeContact,\r\n  setFilter,\r\n  setLoader,\r\n  setError,\r\n} from \"./actions\";\r\n\r\nconst itemsRedusers = createReducer([], {\r\n  [addNewContact]: (state, action) => [...state, action.payload],\r\n  [getAllContacts]: (_, action) => action.payload,\r\n  [removeContact]: (state, action) =>\r\n    state.filter((contact) => contact.id !== action.payload),\r\n});\r\n\r\nconst contactLoaderReducer = createReducer(false, {\r\n  [setLoader]: (state) => !state,\r\n});\r\n\r\nconst filterReduser = createReducer(\"\", {\r\n  [setFilter]: (_, action) => action.payload,\r\n});\r\nconst errorReducer = createReducer(\"\", {\r\n  [setError]: (_, action) => action.payload,\r\n});\r\n\r\nexport const contactsReduser = combineReducers({\r\n  items: itemsRedusers,\r\n  filter: filterReduser,\r\n  isLoading: contactLoaderReducer,\r\n  error: errorReducer,\r\n});\r\n","import { combineReducers } from \"redux\";\r\nimport { configureStore } from \"@reduxjs/toolkit\";\r\nimport { contactsReduser } from \"./contacts/redusers\";\r\n\r\nconst rootReducer = combineReducers({\r\n  contacts: contactsReduser,\r\n});\r\nconst store = configureStore({\r\n  reducer: rootReducer,\r\n});\r\nexport default store;\r\n","import React from \"react\";\r\nimport ReactDom from \"react-dom\";\r\nimport { Provider } from \"react-redux\";\r\n// import { PersistGate } from \"redux-persist/integration/react\";\r\nimport App from \"./Components/App\";\r\nimport store from \"./redux/store\";\r\n// import { store, persistor } from \"./redux/store\";\r\n\r\nReactDom.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}